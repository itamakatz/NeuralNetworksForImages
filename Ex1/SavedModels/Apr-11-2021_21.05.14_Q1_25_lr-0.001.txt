Net(
  (conv1): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
  (conv2): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
  (conv3): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
  (conv4): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
  (conv5): Conv2d(64, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
  (conv6): Conv2d(128, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
  (conv7): Conv2d(128, 256, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (fc1): Linear(in_features=4096, out_features=128, bias=True)
  (fc2): Linear(in_features=128, out_features=10, bias=True)
  (loss_function): CrossEntropyLoss()
)
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Conv2d-1           [-1, 32, 32, 32]           2,432
            Conv2d-2           [-1, 32, 32, 32]          25,632
         MaxPool2d-3           [-1, 32, 16, 16]               0
            Conv2d-4           [-1, 64, 16, 16]          51,264
            Conv2d-5           [-1, 64, 16, 16]         102,464
         MaxPool2d-6             [-1, 64, 8, 8]               0
            Conv2d-7            [-1, 128, 8, 8]         204,928
            Conv2d-8            [-1, 128, 8, 8]         409,728
            Conv2d-9            [-1, 256, 8, 8]         819,456
        MaxPool2d-10            [-1, 256, 4, 4]               0
           Linear-11                  [-1, 128]         524,416
           Linear-12                   [-1, 10]           1,290
================================================================
Total params: 2,141,610
Trainable params: 2,141,610
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.01
Forward/backward pass size (MB): 1.13
Params size (MB): 8.17
Estimated Total Size (MB): 9.31
----------------------------------------------------------------

Extra info:
Model's state_dict:
conv1.weight 	 torch.Size([32, 3, 5, 5])
conv1.bias 	 torch.Size([32])
conv2.weight 	 torch.Size([32, 32, 5, 5])
conv2.bias 	 torch.Size([32])
conv3.weight 	 torch.Size([64, 32, 5, 5])
conv3.bias 	 torch.Size([64])
conv4.weight 	 torch.Size([64, 64, 5, 5])
conv4.bias 	 torch.Size([64])
conv5.weight 	 torch.Size([128, 64, 5, 5])
conv5.bias 	 torch.Size([128])
conv6.weight 	 torch.Size([128, 128, 5, 5])
conv6.bias 	 torch.Size([128])
conv7.weight 	 torch.Size([256, 128, 5, 5])
conv7.bias 	 torch.Size([256])
fc1.weight 	 torch.Size([128, 4096])
fc1.bias 	 torch.Size([128])
fc2.weight 	 torch.Size([10, 128])
fc2.bias 	 torch.Size([10])

Optimizer's state_dict:
state 	 {}
param_groups 	 [{'lr': 0.001, 'momentum': 0.9, 'dampening': 0, 'weight_decay': 0, 'nesterov': False, 'params': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]}]

epoch: 1, train_loss: 2.1008204121780394, train_accuracy: 0.18642, test_loss: 1.7096455982208252, test_accuracy: 0.3299
epoch: 2, train_loss: 1.4897945935040713, train_accuracy: 0.44452, test_loss: 1.2786559034913778, test_accuracy: 0.5336
epoch: 3, train_loss: 1.0991224718879162, train_accuracy: 0.60388, test_loss: 0.9445082398755476, test_accuracy: 0.67
epoch: 4, train_loss: 0.85803375094641, train_accuracy: 0.69684, test_loss: 0.9715752614924684, test_accuracy: 0.6624
epoch: 5, train_loss: 0.7032941288253479, train_accuracy: 0.75344, test_loss: 0.7044995686027221, test_accuracy: 0.7556
epoch: 6, train_loss: 0.5924563075340155, train_accuracy: 0.79448, test_loss: 0.684393949803384, test_accuracy: 0.7683
epoch: 7, train_loss: 0.4973025137627215, train_accuracy: 0.82558, test_loss: 0.6800844427757372, test_accuracy: 0.7729
epoch: 8, train_loss: 0.41901397259627143, train_accuracy: 0.85406, test_loss: 0.6537054344040895, test_accuracy: 0.788
epoch: 9, train_loss: 0.35778422826988143, train_accuracy: 0.87592, test_loss: 0.6701108782544819, test_accuracy: 0.7786
epoch: 10, train_loss: 0.3049576661512838, train_accuracy: 0.89394, test_loss: 0.7478269140031453, test_accuracy: 0.7812
epoch: 11, train_loss: 0.26966970959812425, train_accuracy: 0.90742, test_loss: 0.7499047743671202, test_accuracy: 0.795
epoch: 12, train_loss: 0.24414376577103453, train_accuracy: 0.91404, test_loss: 0.7877752876287913, test_accuracy: 0.7829
epoch: 13, train_loss: 0.22668842621661373, train_accuracy: 0.9221, test_loss: 0.8637049194843522, test_accuracy: 0.7652
epoch: 14, train_loss: 0.21298490533124584, train_accuracy: 0.92578, test_loss: 0.9227524959297978, test_accuracy: 0.7746
epoch: 15, train_loss: 0.19745130925389764, train_accuracy: 0.93412, test_loss: 0.9576492889699842, test_accuracy: 0.7777

Accuracy of plane : 84 %
Accuracy of   car : 79 %
Accuracy of  bird : 70 %
Accuracy of   cat : 57 %
Accuracy of  deer : 78 %
Accuracy of   dog : 65 %
Accuracy of  frog : 88 %
Accuracy of horse : 83 %
Accuracy of  ship : 88 %
Accuracy of truck : 81 %
