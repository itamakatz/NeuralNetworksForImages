Net(
  (conv1): Conv2d(3, 10, kernel_size=(5, 5), stride=(1, 1))
  (conv2): Conv2d(10, 36, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (fc1): Linear(in_features=900, out_features=400, bias=True)
  (fc2): Linear(in_features=400, out_features=120, bias=True)
  (fc3): Linear(in_features=120, out_features=84, bias=True)
  (fc4): Linear(in_features=84, out_features=10, bias=True)
  (loss_function): CrossEntropyLoss()
)
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Conv2d-1           [-1, 10, 28, 28]             760
         MaxPool2d-2           [-1, 10, 14, 14]               0
            Conv2d-3           [-1, 36, 10, 10]           9,036
         MaxPool2d-4             [-1, 36, 5, 5]               0
            Linear-5                  [-1, 400]         360,400
            Linear-6                  [-1, 120]          48,120
            Linear-7                   [-1, 84]          10,164
            Linear-8                   [-1, 10]             850
================================================================
Total params: 429,330
Trainable params: 429,330
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.01
Forward/backward pass size (MB): 0.11
Params size (MB): 1.64
Estimated Total Size (MB): 1.76
----------------------------------------------------------------

Extra info:
Model's state_dict:
conv1.weight 	 torch.Size([10, 3, 5, 5])
conv1.bias 	 torch.Size([10])
conv2.weight 	 torch.Size([36, 10, 5, 5])
conv2.bias 	 torch.Size([36])
fc1.weight 	 torch.Size([400, 900])
fc1.bias 	 torch.Size([400])
fc2.weight 	 torch.Size([120, 400])
fc2.bias 	 torch.Size([120])
fc3.weight 	 torch.Size([84, 120])
fc3.bias 	 torch.Size([84])
fc4.weight 	 torch.Size([10, 84])
fc4.bias 	 torch.Size([10])

Optimizer's state_dict:
state 	 {}
param_groups 	 [{'lr': 0.001, 'momentum': 0.9, 'dampening': 0, 'weight_decay': 0, 'nesterov': False, 'params': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]}]

epoch: 1, train_loss: 1.7406559316968917, train_accuracy: 0.35474, test_loss: 1.3743991531968116, test_accuracy: 0.502
epoch: 2, train_loss: 1.2722725868213176, train_accuracy: 0.5463, test_loss: 1.1624408522203564, test_accuracy: 0.5854
epoch: 3, train_loss: 1.0653320548167824, train_accuracy: 0.62598, test_loss: 1.0449781977266073, test_accuracy: 0.6337
epoch: 4, train_loss: 0.9170215612663328, train_accuracy: 0.67828, test_loss: 0.9788220442220569, test_accuracy: 0.6619
epoch: 5, train_loss: 0.7977956451639603, train_accuracy: 0.72134, test_loss: 0.9598761265970767, test_accuracy: 0.6702
epoch: 6, train_loss: 0.6937745132609084, train_accuracy: 0.75836, test_loss: 0.9353852782418951, test_accuracy: 0.6818
epoch: 7, train_loss: 0.6013676519408659, train_accuracy: 0.78752, test_loss: 1.0062757542085834, test_accuracy: 0.6718
epoch: 8, train_loss: 0.5199639150930394, train_accuracy: 0.81466, test_loss: 1.0704311725464184, test_accuracy: 0.6718
epoch: 9, train_loss: 0.4452560637517215, train_accuracy: 0.84298, test_loss: 1.117532123214913, test_accuracy: 0.6785
epoch: 10, train_loss: 0.3858936206882355, train_accuracy: 0.863, test_loss: 1.1761859394556027, test_accuracy: 0.6757
epoch: 11, train_loss: 0.3311422674990355, train_accuracy: 0.88242, test_loss: 1.2668942158925718, test_accuracy: 0.6773
