Net(
  (conv1): Conv2d(3, 10, kernel_size=(5, 5), stride=(1, 1))
  (conv2): Conv2d(10, 28, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (fc1): Linear(in_features=700, out_features=120, bias=True)
  (fc2): Linear(in_features=120, out_features=84, bias=True)
  (fc3): Linear(in_features=84, out_features=10, bias=True)
  (loss_function): CrossEntropyLoss()
)
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Conv2d-1           [-1, 10, 28, 28]             760
         MaxPool2d-2           [-1, 10, 14, 14]               0
            Conv2d-3           [-1, 28, 10, 10]           7,028
         MaxPool2d-4             [-1, 28, 5, 5]               0
            Linear-5                  [-1, 120]          84,120
            Linear-6                   [-1, 84]          10,164
            Linear-7                   [-1, 10]             850
================================================================
Total params: 102,922
Trainable params: 102,922
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.01
Forward/backward pass size (MB): 0.10
Params size (MB): 0.39
Estimated Total Size (MB): 0.51
----------------------------------------------------------------

Extra info:
Model's state_dict:
conv1.weight 	 torch.Size([10, 3, 5, 5])
conv1.bias 	 torch.Size([10])
conv2.weight 	 torch.Size([28, 10, 5, 5])
conv2.bias 	 torch.Size([28])
fc1.weight 	 torch.Size([120, 700])
fc1.bias 	 torch.Size([120])
fc2.weight 	 torch.Size([84, 120])
fc2.bias 	 torch.Size([84])
fc3.weight 	 torch.Size([10, 84])
fc3.bias 	 torch.Size([10])

Optimizer's state_dict:
state 	 {}
param_groups 	 [{'lr': 0.001, 'momentum': 0.9, 'dampening': 0, 'weight_decay': 0, 'nesterov': False, 'params': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]}]

epoch: 1, train_loss: 1.6263799114131927, train_accuracy: 0.40096, test_loss: 1.313205530256033, test_accuracy: 0.5177
epoch: 2, train_loss: 1.2290227322618663, train_accuracy: 0.56052, test_loss: 1.1502238086491823, test_accuracy: 0.5993
epoch: 3, train_loss: 1.0607170624163746, train_accuracy: 0.62762, test_loss: 1.0672922424301505, test_accuracy: 0.6287
epoch: 4, train_loss: 0.9507241028811038, train_accuracy: 0.66434, test_loss: 0.9985380967475473, test_accuracy: 0.6588
epoch: 5, train_loss: 0.8620742203989625, train_accuracy: 0.69706, test_loss: 1.021570404258929, test_accuracy: 0.6614
epoch: 6, train_loss: 0.7921674898113823, train_accuracy: 0.72286, test_loss: 1.0086979319160805, test_accuracy: 0.6688
epoch: 7, train_loss: 0.7406873213181877, train_accuracy: 0.73952, test_loss: 0.9887753615169087, test_accuracy: 0.6711
epoch: 8, train_loss: 0.6864304063894603, train_accuracy: 0.75646, test_loss: 1.004772947291215, test_accuracy: 0.6806
epoch: 9, train_loss: 0.6438536146536935, train_accuracy: 0.77302, test_loss: 1.0588089247019612, test_accuracy: 0.6586
epoch: 10, train_loss: 0.6106101182503701, train_accuracy: 0.78482, test_loss: 1.0832011690341752, test_accuracy: 0.6638
epoch: 11, train_loss: 0.5781971556081668, train_accuracy: 0.79638, test_loss: 1.1242084547383477, test_accuracy: 0.6528
epoch: 12, train_loss: 0.55059750936113, train_accuracy: 0.80446, test_loss: 1.1162332760847755, test_accuracy: 0.6691
epoch: 13, train_loss: 0.5341512090383458, train_accuracy: 0.8117, test_loss: 1.1485272129060642, test_accuracy: 0.6611
epoch: 14, train_loss: 0.5028659345498762, train_accuracy: 0.82138, test_loss: 1.198135509632686, test_accuracy: 0.6694
epoch: 15, train_loss: 0.48616922172558946, train_accuracy: 0.83004, test_loss: 1.2064571784226923, test_accuracy: 0.6675
epoch: 16, train_loss: 0.4794083899882485, train_accuracy: 0.83272, test_loss: 1.2616828773420536, test_accuracy: 0.6531
epoch: 17, train_loss: 0.4581643473033796, train_accuracy: 0.83916, test_loss: 1.3430079236656893, test_accuracy: 0.65
epoch: 18, train_loss: 0.4481833593919202, train_accuracy: 0.845, test_loss: 1.3120514042421236, test_accuracy: 0.65
epoch: 19, train_loss: 0.4360763827299721, train_accuracy: 0.8488, test_loss: 1.3566422493359507, test_accuracy: 0.6633
epoch: 20, train_loss: 0.4279375339459622, train_accuracy: 0.85224, test_loss: 1.4858787580680626, test_accuracy: 0.6511
epoch: 21, train_loss: 0.42356363660497215, train_accuracy: 0.8514, test_loss: 1.4670645845435437, test_accuracy: 0.6485
epoch: 22, train_loss: 0.4084270364706611, train_accuracy: 0.85816, test_loss: 1.6210436255174727, test_accuracy: 0.6485
epoch: 23, train_loss: 0.4111539103220285, train_accuracy: 0.8595, test_loss: 1.5722563091728168, test_accuracy: 0.6549
epoch: 24, train_loss: 0.41683157054860037, train_accuracy: 0.8587, test_loss: 1.5977644688672443, test_accuracy: 0.6397
epoch: 25, train_loss: 0.39405914852562507, train_accuracy: 0.86508, test_loss: 1.6007968481532322, test_accuracy: 0.6479
epoch: 26, train_loss: 0.38822374217115446, train_accuracy: 0.86904, test_loss: 1.6232610094108484, test_accuracy: 0.6516
epoch: 27, train_loss: 0.3899061521117973, train_accuracy: 0.87042, test_loss: 1.6766407672951928, test_accuracy: 0.6477
epoch: 28, train_loss: 0.3973597625193911, train_accuracy: 0.86854, test_loss: 1.8440922790896457, test_accuracy: 0.6365
epoch: 29, train_loss: 0.38942521928045476, train_accuracy: 0.87054, test_loss: 1.76819452282439, test_accuracy: 0.628
epoch: 30, train_loss: 0.39627980959046494, train_accuracy: 0.87038, test_loss: 1.79216213635156, test_accuracy: 0.64
epoch: 31, train_loss: 0.38445558524367707, train_accuracy: 0.87446, test_loss: 1.7977648529059367, test_accuracy: 0.6345
epoch: 32, train_loss: 0.39104157754461033, train_accuracy: 0.8729, test_loss: 1.801809088330109, test_accuracy: 0.6403
epoch: 33, train_loss: 0.3841318568319287, train_accuracy: 0.87484, test_loss: 1.879293751365857, test_accuracy: 0.6345
epoch: 34, train_loss: 0.3834698138554619, train_accuracy: 0.87456, test_loss: 1.9514663719502245, test_accuracy: 0.6507
epoch: 35, train_loss: 0.39123591936445073, train_accuracy: 0.87412, test_loss: 1.888728757852935, test_accuracy: 0.6383
epoch: 36, train_loss: 0.4061480236941002, train_accuracy: 0.87078, test_loss: 1.9202363001212808, test_accuracy: 0.6352
epoch: 37, train_loss: 0.39201956421944933, train_accuracy: 0.87524, test_loss: 2.005963103337874, test_accuracy: 0.6338
epoch: 38, train_loss: 0.39356873835470685, train_accuracy: 0.87616, test_loss: 1.9035467756771065, test_accuracy: 0.6384
epoch: 39, train_loss: 0.3740212249169556, train_accuracy: 0.88194, test_loss: 1.9106413662645474, test_accuracy: 0.6421
epoch: 40, train_loss: 0.39222433385755556, train_accuracy: 0.87844, test_loss: 2.034299676214317, test_accuracy: 0.6369
epoch: 41, train_loss: 0.4112980648071567, train_accuracy: 0.87198, test_loss: 2.023064547962879, test_accuracy: 0.6316
epoch: 42, train_loss: 0.4051066304971357, train_accuracy: 0.87298, test_loss: 2.0440204631707313, test_accuracy: 0.6288
epoch: 43, train_loss: 0.41159538596185036, train_accuracy: 0.87148, test_loss: 2.1364342977569324, test_accuracy: 0.6322
epoch: 44, train_loss: 0.3935129925973525, train_accuracy: 0.87918, test_loss: 2.1583992069224562, test_accuracy: 0.6151
epoch: 45, train_loss: 0.40791449417838727, train_accuracy: 0.87626, test_loss: 2.3003570206738484, test_accuracy: 0.6181
epoch: 46, train_loss: 0.41333717162807415, train_accuracy: 0.876, test_loss: 2.3030567324630202, test_accuracy: 0.6268
epoch: 47, train_loss: 0.4105155342750619, train_accuracy: 0.87456, test_loss: 2.1755470809939097, test_accuracy: 0.6374
epoch: 48, train_loss: 0.4022968950182425, train_accuracy: 0.8772, test_loss: 2.2195294058067323, test_accuracy: 0.6298
epoch: 49, train_loss: 0.41252193550468436, train_accuracy: 0.87318, test_loss: 2.2222602822645827, test_accuracy: 0.6197
epoch: 50, train_loss: 0.4049198913301814, train_accuracy: 0.87848, test_loss: 2.150873891531563, test_accuracy: 0.6264

Accuracy of plane : 63 %
Accuracy of   car : 73 %
Accuracy of  bird : 49 %
Accuracy of   cat : 47 %
Accuracy of  deer : 50 %
Accuracy of   dog : 49 %
Accuracy of  frog : 73 %
Accuracy of horse : 70 %
Accuracy of  ship : 72 %
Accuracy of truck : 78 %
