Net(
  (conv1): Conv2d(3, 6, kernel_size=(5, 5), stride=(1, 1), padding=(1, 1))
  (conv2): Conv2d(6, 6, kernel_size=(5, 5), stride=(1, 1), padding=(1, 1))
  (conv3): Conv2d(6, 6, kernel_size=(5, 5), stride=(1, 1), padding=(1, 1))
  (conv4): Conv2d(6, 10, kernel_size=(5, 5), stride=(1, 1), padding=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (fc1): Linear(in_features=250, out_features=120, bias=True)
  (fc2): Linear(in_features=120, out_features=84, bias=True)
  (fc3): Linear(in_features=84, out_features=10, bias=True)
  (loss_function): CrossEntropyLoss()
)
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Conv2d-1            [-1, 6, 30, 30]             456
            Conv2d-2            [-1, 6, 28, 28]             906
         MaxPool2d-3            [-1, 6, 14, 14]               0
            Conv2d-4            [-1, 6, 12, 12]             906
            Conv2d-5           [-1, 10, 10, 10]           1,510
         MaxPool2d-6             [-1, 10, 5, 5]               0
            Linear-7                  [-1, 120]          30,120
            Linear-8                   [-1, 84]          10,164
            Linear-9                   [-1, 10]             850
================================================================
Total params: 44,912
Trainable params: 44,912
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.01
Forward/backward pass size (MB): 0.10
Params size (MB): 0.17
Estimated Total Size (MB): 0.29
----------------------------------------------------------------

Extra info:
Model's state_dict:
conv1.weight 	 torch.Size([6, 3, 5, 5])
conv1.bias 	 torch.Size([6])
conv2.weight 	 torch.Size([6, 6, 5, 5])
conv2.bias 	 torch.Size([6])
conv3.weight 	 torch.Size([6, 6, 5, 5])
conv3.bias 	 torch.Size([6])
conv4.weight 	 torch.Size([10, 6, 5, 5])
conv4.bias 	 torch.Size([10])
fc1.weight 	 torch.Size([120, 250])
fc1.bias 	 torch.Size([120])
fc2.weight 	 torch.Size([84, 120])
fc2.bias 	 torch.Size([84])
fc3.weight 	 torch.Size([10, 84])
fc3.bias 	 torch.Size([10])

Optimizer's state_dict:
state 	 {}
param_groups 	 [{'lr': 0.001, 'momentum': 0.9, 'dampening': 0, 'weight_decay': 0, 'nesterov': False, 'params': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]}]

epoch: 1, train_loss: 2.0505684542894365, train_accuracy: 0.22694, test_loss: 1.7097926231384277, test_accuracy: 0.3574
epoch: 2, train_loss: 1.5668422234356403, train_accuracy: 0.42598, test_loss: 1.465795571345091, test_accuracy: 0.4647
epoch: 3, train_loss: 1.3677690914988518, train_accuracy: 0.50584, test_loss: 1.2864615115374327, test_accuracy: 0.5392
epoch: 4, train_loss: 1.243136409741044, train_accuracy: 0.55558, test_loss: 1.1956740673460067, test_accuracy: 0.5744
epoch: 5, train_loss: 1.166369382994473, train_accuracy: 0.58608, test_loss: 1.201129432386905, test_accuracy: 0.577
epoch: 6, train_loss: 1.1099730907500536, train_accuracy: 0.60604, test_loss: 1.1902180646110325, test_accuracy: 0.5904
epoch: 7, train_loss: 1.0746602084042132, train_accuracy: 0.62178, test_loss: 1.245431269178167, test_accuracy: 0.5794
epoch: 8, train_loss: 1.0492614887031169, train_accuracy: 0.62918, test_loss: 1.1109203483990975, test_accuracy: 0.617
epoch: 9, train_loss: 1.0243994066503457, train_accuracy: 0.6408, test_loss: 1.1005639611802995, test_accuracy: 0.6189
epoch: 10, train_loss: 1.008593195826672, train_accuracy: 0.64556, test_loss: 1.1310482984803616, test_accuracy: 0.611
epoch: 11, train_loss: 0.9902993807815015, train_accuracy: 0.6494, test_loss: 1.100242068914231, test_accuracy: 0.6279
epoch: 12, train_loss: 0.9819887523196824, train_accuracy: 0.6543, test_loss: 1.1093618704672903, test_accuracy: 0.6165
epoch: 13, train_loss: 0.9743359058127435, train_accuracy: 0.65806, test_loss: 1.115676720084995, test_accuracy: 0.6221
epoch: 14, train_loss: 0.9667600377263129, train_accuracy: 0.66248, test_loss: 1.0905169893308542, test_accuracy: 0.6296
epoch: 15, train_loss: 0.9511729264933988, train_accuracy: 0.66746, test_loss: 1.085341440295987, test_accuracy: 0.6383
epoch: 16, train_loss: 0.9523729452595615, train_accuracy: 0.66644, test_loss: 1.1655839870344848, test_accuracy: 0.6212
epoch: 17, train_loss: 0.951504169505299, train_accuracy: 0.66744, test_loss: 1.1658215410437436, test_accuracy: 0.6036
epoch: 18, train_loss: 0.9532776861426042, train_accuracy: 0.66618, test_loss: 1.1369104653494433, test_accuracy: 0.6167
epoch: 19, train_loss: 0.9494422361727245, train_accuracy: 0.6697, test_loss: 1.2228334231590388, test_accuracy: 0.6035
epoch: 20, train_loss: 0.9377198506902718, train_accuracy: 0.6719, test_loss: 1.159253784424346, test_accuracy: 0.6169
epoch: 21, train_loss: 0.9448965257406234, train_accuracy: 0.67026, test_loss: 1.1395950056361035, test_accuracy: 0.6215
epoch: 22, train_loss: 0.9434457848899358, train_accuracy: 0.67256, test_loss: 1.2065847112488002, test_accuracy: 0.6008
epoch: 23, train_loss: 0.9329927407538763, train_accuracy: 0.67298, test_loss: 1.1397743372801692, test_accuracy: 0.6289
epoch: 24, train_loss: 0.9351147560377978, train_accuracy: 0.67264, test_loss: 1.1516588885914534, test_accuracy: 0.6117
epoch: 25, train_loss: 0.9273839985177875, train_accuracy: 0.67746, test_loss: 1.1576773793328554, test_accuracy: 0.6102
epoch: 26, train_loss: 0.9406585091170668, train_accuracy: 0.67424, test_loss: 1.2456621994798538, test_accuracy: 0.6072
epoch: 27, train_loss: 0.9296806140739308, train_accuracy: 0.67612, test_loss: 1.134751915634994, test_accuracy: 0.6267
epoch: 28, train_loss: 0.9236394549805298, train_accuracy: 0.6776, test_loss: 1.183554852719116, test_accuracy: 0.6225
epoch: 29, train_loss: 0.9300549037260563, train_accuracy: 0.67674, test_loss: 1.2528815341376933, test_accuracy: 0.5933
epoch: 30, train_loss: 0.926703599905253, train_accuracy: 0.67736, test_loss: 1.1779851745899184, test_accuracy: 0.6151
epoch: 31, train_loss: 0.9378559230046486, train_accuracy: 0.67604, test_loss: 1.164546782590184, test_accuracy: 0.623
epoch: 32, train_loss: 0.9328529948528553, train_accuracy: 0.67838, test_loss: 1.219750249819382, test_accuracy: 0.6025
epoch: 33, train_loss: 0.9393008401757316, train_accuracy: 0.67696, test_loss: 1.164085188343113, test_accuracy: 0.6236
epoch: 34, train_loss: 0.9248800391977664, train_accuracy: 0.68092, test_loss: 1.2290245630799328, test_accuracy: 0.6082
epoch: 35, train_loss: 0.9268450033117295, train_accuracy: 0.67706, test_loss: 1.1934258941429667, test_accuracy: 0.6145
