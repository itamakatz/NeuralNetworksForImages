Net(
  (conv1): Conv2d(3, 6, kernel_size=(5, 5), stride=(1, 1))
  (conv2): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (fc1): Linear(in_features=400, out_features=120, bias=True)
  (fc2): Linear(in_features=120, out_features=10, bias=True)
  (loss_function): CrossEntropyLoss()
)
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Conv2d-1            [-1, 6, 28, 28]             456
         MaxPool2d-2            [-1, 6, 14, 14]               0
            Conv2d-3           [-1, 16, 10, 10]           2,416
         MaxPool2d-4             [-1, 16, 5, 5]               0
            Linear-5                  [-1, 120]          48,120
            Linear-6                   [-1, 10]           1,210
================================================================
Total params: 52,202
Trainable params: 52,202
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.01
Forward/backward pass size (MB): 0.06
Params size (MB): 0.20
Estimated Total Size (MB): 0.27
----------------------------------------------------------------

Extra info:
Model's state_dict:
conv1.weight 	 torch.Size([6, 3, 5, 5])
conv1.bias 	 torch.Size([6])
conv2.weight 	 torch.Size([16, 6, 5, 5])
conv2.bias 	 torch.Size([16])
fc1.weight 	 torch.Size([120, 400])
fc1.bias 	 torch.Size([120])
fc2.weight 	 torch.Size([10, 120])
fc2.bias 	 torch.Size([10])

Optimizer's state_dict:
state 	 {}
param_groups 	 [{'lr': 0.001, 'momentum': 0.9, 'dampening': 0, 'weight_decay': 0, 'nesterov': False, 'params': [0, 1, 2, 3, 4, 5, 6, 7]}]

epoch: 1, train_loss: 1.6193498694610595, train_accuracy: 0.41008, test_loss: 1.4117689381957055, test_accuracy: 0.4885
epoch: 2, train_loss: 1.3017310978335142, train_accuracy: 0.53582, test_loss: 1.3301510546147823, test_accuracy: 0.5232
epoch: 3, train_loss: 1.1774517069058121, train_accuracy: 0.58612, test_loss: 1.2097537596151233, test_accuracy: 0.5729
epoch: 4, train_loss: 1.0955652439069004, train_accuracy: 0.61408, test_loss: 1.1597095172345637, test_accuracy: 0.6056
epoch: 5, train_loss: 1.0228174968566746, train_accuracy: 0.63906, test_loss: 1.1059505900211632, test_accuracy: 0.6209
epoch: 6, train_loss: 0.9695850351419486, train_accuracy: 0.65826, test_loss: 1.1017282104678452, test_accuracy: 0.6195
epoch: 7, train_loss: 0.9279340293981507, train_accuracy: 0.67378, test_loss: 1.1219561098609119, test_accuracy: 0.6184
epoch: 8, train_loss: 0.8888955530640855, train_accuracy: 0.68834, test_loss: 1.1236555664896966, test_accuracy: 0.6216
epoch: 9, train_loss: 0.8600224861964211, train_accuracy: 0.69768, test_loss: 1.1606478055873886, test_accuracy: 0.6182
epoch: 10, train_loss: 0.8318767049775226, train_accuracy: 0.70892, test_loss: 1.1800100054830314, test_accuracy: 0.6228
epoch: 11, train_loss: 0.8041193728788907, train_accuracy: 0.7165, test_loss: 1.1796564293765464, test_accuracy: 0.619
epoch: 12, train_loss: 0.7820114183036337, train_accuracy: 0.7262, test_loss: 1.2125035960793495, test_accuracy: 0.623
epoch: 13, train_loss: 0.7641645272324251, train_accuracy: 0.73168, test_loss: 1.2261108100788667, test_accuracy: 0.6173
epoch: 14, train_loss: 0.7476612215988664, train_accuracy: 0.73694, test_loss: 1.2360664512025192, test_accuracy: 0.6154
epoch: 15, train_loss: 0.7305417168200924, train_accuracy: 0.74168, test_loss: 1.258884834070597, test_accuracy: 0.6136
epoch: 16, train_loss: 0.717091583464949, train_accuracy: 0.74632, test_loss: 1.3104072697665543, test_accuracy: 0.6103
epoch: 17, train_loss: 0.7096555471158409, train_accuracy: 0.74966, test_loss: 1.3411935286168009, test_accuracy: 0.6051
epoch: 18, train_loss: 0.693056679577881, train_accuracy: 0.75446, test_loss: 1.3598988285000204, test_accuracy: 0.6129
epoch: 19, train_loss: 0.683180483844314, train_accuracy: 0.75884, test_loss: 1.3781295403095895, test_accuracy: 0.5978
epoch: 20, train_loss: 0.6776838662357262, train_accuracy: 0.76084, test_loss: 1.4112359863791615, test_accuracy: 0.6023
epoch: 21, train_loss: 0.6672818350810337, train_accuracy: 0.76506, test_loss: 1.4516345920530147, test_accuracy: 0.599
epoch: 22, train_loss: 0.6580620797167696, train_accuracy: 0.76728, test_loss: 1.4510507391058607, test_accuracy: 0.6017
epoch: 23, train_loss: 0.6544792977587434, train_accuracy: 0.76924, test_loss: 1.4998929257214535, test_accuracy: 0.5943
epoch: 24, train_loss: 0.6472206913694967, train_accuracy: 0.77268, test_loss: 1.5488216090222822, test_accuracy: 0.5953
epoch: 25, train_loss: 0.6347827035682365, train_accuracy: 0.77778, test_loss: 1.6036044293276965, test_accuracy: 0.5887
