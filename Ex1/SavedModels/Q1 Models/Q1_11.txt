Net(
  (conv1): Conv2d(3, 10, kernel_size=(5, 5), stride=(1, 1))
  (conv2): Conv2d(10, 36, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (fc1): Linear(in_features=900, out_features=400, bias=True)
  (fc2): Linear(in_features=400, out_features=120, bias=True)
  (fc3): Linear(in_features=120, out_features=84, bias=True)
  (fc4): Linear(in_features=84, out_features=10, bias=True)
  (loss_function): CrossEntropyLoss()
)
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Conv2d-1           [-1, 10, 28, 28]             760
         MaxPool2d-2           [-1, 10, 14, 14]               0
            Conv2d-3           [-1, 36, 10, 10]           9,036
         MaxPool2d-4             [-1, 36, 5, 5]               0
            Linear-5                  [-1, 400]         360,400
            Linear-6                  [-1, 120]          48,120
            Linear-7                   [-1, 84]          10,164
            Linear-8                   [-1, 10]             850
================================================================
Total params: 429,330
Trainable params: 429,330
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.01
Forward/backward pass size (MB): 0.11
Params size (MB): 1.64
Estimated Total Size (MB): 1.76
----------------------------------------------------------------

Extra info:
Model's state_dict:
conv1.weight 	 torch.Size([10, 3, 5, 5])
conv1.bias 	 torch.Size([10])
conv2.weight 	 torch.Size([36, 10, 5, 5])
conv2.bias 	 torch.Size([36])
fc1.weight 	 torch.Size([400, 900])
fc1.bias 	 torch.Size([400])
fc2.weight 	 torch.Size([120, 400])
fc2.bias 	 torch.Size([120])
fc3.weight 	 torch.Size([84, 120])
fc3.bias 	 torch.Size([84])
fc4.weight 	 torch.Size([10, 84])
fc4.bias 	 torch.Size([10])

Optimizer's state_dict:
state 	 {}
param_groups 	 [{'lr': 0.001, 'momentum': 0.9, 'dampening': 0, 'weight_decay': 0, 'nesterov': False, 'params': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]}]

epoch: 1, train_loss: 1.7247757113528253, train_accuracy: 0.3562, test_loss: 1.4030982042253017, test_accuracy: 0.4874
epoch: 2, train_loss: 1.2851082287450135, train_accuracy: 0.5393, test_loss: 1.1924855002105237, test_accuracy: 0.5772
epoch: 3, train_loss: 1.0866846002224089, train_accuracy: 0.61652, test_loss: 1.0655135091677308, test_accuracy: 0.6249
epoch: 4, train_loss: 0.9423504855232686, train_accuracy: 0.67012, test_loss: 1.0412689774237573, test_accuracy: 0.6391
epoch: 5, train_loss: 0.8219794185058773, train_accuracy: 0.71208, test_loss: 1.0062972099654377, test_accuracy: 0.6602
epoch: 6, train_loss: 0.715430786948502, train_accuracy: 0.74666, test_loss: 1.000081734915916, test_accuracy: 0.6681
epoch: 7, train_loss: 0.6200701564063341, train_accuracy: 0.78254, test_loss: 1.084623446171917, test_accuracy: 0.6486
epoch: 8, train_loss: 0.5302509064806789, train_accuracy: 0.8113, test_loss: 1.0621141156882805, test_accuracy: 0.6736
epoch: 9, train_loss: 0.4594819008945732, train_accuracy: 0.8382, test_loss: 1.156697882733663, test_accuracy: 0.6657
epoch: 10, train_loss: 0.3978809335673165, train_accuracy: 0.86084, test_loss: 1.2444565914923529, test_accuracy: 0.6615
epoch: 11, train_loss: 0.3441539899460864, train_accuracy: 0.87936, test_loss: 1.306700363770919, test_accuracy: 0.666
epoch: 12, train_loss: 0.29834424147074473, train_accuracy: 0.89638, test_loss: 1.3519498558070213, test_accuracy: 0.6692
epoch: 13, train_loss: 0.264081763383221, train_accuracy: 0.9081, test_loss: 1.48902344139138, test_accuracy: 0.6641
epoch: 14, train_loss: 0.23285996049039182, train_accuracy: 0.91948, test_loss: 1.5612241983490107, test_accuracy: 0.6607
epoch: 15, train_loss: 0.2144166882523125, train_accuracy: 0.92728, test_loss: 1.68969030559577, test_accuracy: 0.6571

Accuracy of plane : 69 %
Accuracy of   car : 73 %
Accuracy of  bird : 60 %
Accuracy of   cat : 41 %
Accuracy of  deer : 58 %
Accuracy of   dog : 58 %
Accuracy of  frog : 74 %
Accuracy of horse : 68 %
Accuracy of  ship : 78 %
Accuracy of truck : 74 %
