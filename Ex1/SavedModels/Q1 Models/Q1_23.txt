Net(
  (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv6): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (fc1): Linear(in_features=4096, out_features=128, bias=True)
  (fc2): Linear(in_features=128, out_features=10, bias=True)
  (loss_function): CrossEntropyLoss()
)
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Conv2d-1           [-1, 32, 32, 32]             896
            Conv2d-2           [-1, 32, 32, 32]           9,248
         MaxPool2d-3           [-1, 32, 16, 16]               0
            Conv2d-4           [-1, 64, 16, 16]          18,496
            Conv2d-5           [-1, 64, 16, 16]          36,928
         MaxPool2d-6             [-1, 64, 8, 8]               0
            Conv2d-7            [-1, 128, 8, 8]          73,856
            Conv2d-8            [-1, 256, 8, 8]         295,168
         MaxPool2d-9            [-1, 256, 4, 4]               0
           Linear-10                  [-1, 128]         524,416
           Linear-11                   [-1, 10]           1,290
================================================================
Total params: 960,298
Trainable params: 960,298
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.01
Forward/backward pass size (MB): 1.06
Params size (MB): 3.66
Estimated Total Size (MB): 4.74
----------------------------------------------------------------

Extra info:
Model's state_dict:
conv1.weight 	 torch.Size([32, 3, 3, 3])
conv1.bias 	 torch.Size([32])
conv2.weight 	 torch.Size([32, 32, 3, 3])
conv2.bias 	 torch.Size([32])
conv3.weight 	 torch.Size([64, 32, 3, 3])
conv3.bias 	 torch.Size([64])
conv4.weight 	 torch.Size([64, 64, 3, 3])
conv4.bias 	 torch.Size([64])
conv5.weight 	 torch.Size([128, 64, 3, 3])
conv5.bias 	 torch.Size([128])
conv6.weight 	 torch.Size([256, 128, 3, 3])
conv6.bias 	 torch.Size([256])
fc1.weight 	 torch.Size([128, 4096])
fc1.bias 	 torch.Size([128])
fc2.weight 	 torch.Size([10, 128])
fc2.bias 	 torch.Size([10])

Optimizer's state_dict:
state 	 {}
param_groups 	 [{'lr': 0.001, 'momentum': 0.9, 'dampening': 0, 'weight_decay': 0, 'nesterov': False, 'params': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]}]

epoch: 1, train_loss: 2.0000534336996076, train_accuracy: 0.23972, test_loss: 1.5396022312760353, test_accuracy: 0.4142
epoch: 2, train_loss: 1.3358066679912806, train_accuracy: 0.51542, test_loss: 1.1532783002644778, test_accuracy: 0.5895
epoch: 3, train_loss: 0.9754532536752522, train_accuracy: 0.65408, test_loss: 0.8657143066299148, test_accuracy: 0.6932
epoch: 4, train_loss: 0.7520953477428481, train_accuracy: 0.7352, test_loss: 0.7693795705424622, test_accuracy: 0.7343
epoch: 5, train_loss: 0.6067116226683696, train_accuracy: 0.78794, test_loss: 0.6972033699587337, test_accuracy: 0.7641
epoch: 6, train_loss: 0.4919668753601995, train_accuracy: 0.82774, test_loss: 0.688084090856206, test_accuracy: 0.7733
epoch: 7, train_loss: 0.4000050761278036, train_accuracy: 0.8589, test_loss: 0.7343213948131011, test_accuracy: 0.7675
epoch: 8, train_loss: 0.32626927066257266, train_accuracy: 0.88492, test_loss: 0.7353743712109785, test_accuracy: 0.7703
epoch: 9, train_loss: 0.2701588704941569, train_accuracy: 0.90512, test_loss: 0.8460460952419249, test_accuracy: 0.7593
epoch: 10, train_loss: 0.2367534066511757, train_accuracy: 0.91654, test_loss: 0.9098781486433807, test_accuracy: 0.7641
epoch: 11, train_loss: 0.21662686385885793, train_accuracy: 0.92368, test_loss: 0.9497634673897106, test_accuracy: 0.7576
epoch: 12, train_loss: 0.1920681033071437, train_accuracy: 0.93492, test_loss: 0.9663460322616897, test_accuracy: 0.7644
epoch: 13, train_loss: 0.1746374808683881, train_accuracy: 0.9402, test_loss: 1.062304880173667, test_accuracy: 0.7615
epoch: 14, train_loss: 0.1638768784107844, train_accuracy: 0.94502, test_loss: 1.0889620847606472, test_accuracy: 0.7622
epoch: 15, train_loss: 0.15885635726584968, train_accuracy: 0.94676, test_loss: 1.1737797209615672, test_accuracy: 0.7562

Accuracy of plane : 77 %
Accuracy of   car : 91 %
Accuracy of  bird : 74 %
Accuracy of   cat : 58 %
Accuracy of  deer : 76 %
Accuracy of   dog : 56 %
Accuracy of  frog : 86 %
Accuracy of horse : 79 %
Accuracy of  ship : 80 %
Accuracy of truck : 75 %
