Net(
  (conv1): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
  (conv2): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
  (conv3): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
  (conv4): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
  (conv5): Conv2d(64, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
  (conv6): Conv2d(128, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (fc1): Linear(in_features=2048, out_features=128, bias=True)
  (fc2): Linear(in_features=128, out_features=10, bias=True)
  (loss_function): CrossEntropyLoss()
)
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Conv2d-1           [-1, 32, 32, 32]           2,432
            Conv2d-2           [-1, 32, 32, 32]          25,632
         MaxPool2d-3           [-1, 32, 16, 16]               0
            Conv2d-4           [-1, 64, 16, 16]          51,264
            Conv2d-5           [-1, 64, 16, 16]         102,464
         MaxPool2d-6             [-1, 64, 8, 8]               0
            Conv2d-7            [-1, 128, 8, 8]         204,928
            Conv2d-8            [-1, 128, 8, 8]         409,728
         MaxPool2d-9            [-1, 128, 4, 4]               0
           Linear-10                  [-1, 128]         262,272
           Linear-11                   [-1, 10]           1,290
================================================================
Total params: 1,060,010
Trainable params: 1,060,010
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.01
Forward/backward pass size (MB): 0.99
Params size (MB): 4.04
Estimated Total Size (MB): 5.04
----------------------------------------------------------------

Extra info:
Model's state_dict:
conv1.weight 	 torch.Size([32, 3, 5, 5])
conv1.bias 	 torch.Size([32])
conv2.weight 	 torch.Size([32, 32, 5, 5])
conv2.bias 	 torch.Size([32])
conv3.weight 	 torch.Size([64, 32, 5, 5])
conv3.bias 	 torch.Size([64])
conv4.weight 	 torch.Size([64, 64, 5, 5])
conv4.bias 	 torch.Size([64])
conv5.weight 	 torch.Size([128, 64, 5, 5])
conv5.bias 	 torch.Size([128])
conv6.weight 	 torch.Size([128, 128, 5, 5])
conv6.bias 	 torch.Size([128])
fc1.weight 	 torch.Size([128, 2048])
fc1.bias 	 torch.Size([128])
fc2.weight 	 torch.Size([10, 128])
fc2.bias 	 torch.Size([10])

Optimizer's state_dict:
state 	 {}
param_groups 	 [{'lr': 0.001, 'momentum': 0.9, 'dampening': 0, 'weight_decay': 0, 'nesterov': False, 'params': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]}]

epoch: 1, train_loss: 1.9453773456335068, train_accuracy: 0.2607, test_loss: 1.4718640928924083, test_accuracy: 0.4569
epoch: 2, train_loss: 1.2900864595388621, train_accuracy: 0.53162, test_loss: 1.1385682389140128, test_accuracy: 0.6004
epoch: 3, train_loss: 0.932487891882509, train_accuracy: 0.67078, test_loss: 0.8409157697223126, test_accuracy: 0.7148
epoch: 4, train_loss: 0.7380964026073343, train_accuracy: 0.74266, test_loss: 0.7825684327057097, test_accuracy: 0.7343
epoch: 5, train_loss: 0.6048371253995306, train_accuracy: 0.7901, test_loss: 0.7530670983172022, test_accuracy: 0.7496
epoch: 6, train_loss: 0.50556658279242, train_accuracy: 0.8236, test_loss: 0.6708393108583987, test_accuracy: 0.7716
epoch: 7, train_loss: 0.4280334613408493, train_accuracy: 0.84932, test_loss: 0.7348117338677431, test_accuracy: 0.7699
epoch: 8, train_loss: 0.36416150139055425, train_accuracy: 0.87234, test_loss: 0.752322382728025, test_accuracy: 0.7704
epoch: 9, train_loss: 0.3278452675952735, train_accuracy: 0.88566, test_loss: 0.776461414754775, test_accuracy: 0.7689
epoch: 10, train_loss: 0.299489385386256, train_accuracy: 0.89582, test_loss: 0.8591608965992026, test_accuracy: 0.7588
epoch: 11, train_loss: 0.2788490335520751, train_accuracy: 0.9035, test_loss: 0.8464183461292121, test_accuracy: 0.7582
epoch: 12, train_loss: 0.2605628831295983, train_accuracy: 0.91052, test_loss: 0.9376785041933039, test_accuracy: 0.7591
epoch: 13, train_loss: 0.2542339859879285, train_accuracy: 0.91354, test_loss: 0.9417370658458368, test_accuracy: 0.7583
epoch: 14, train_loss: 0.25722262146363095, train_accuracy: 0.91338, test_loss: 0.9233784640334342, test_accuracy: 0.768
epoch: 15, train_loss: 0.25381674591011877, train_accuracy: 0.91532, test_loss: 1.0307564595445056, test_accuracy: 0.7533

Accuracy of plane : 83 %
Accuracy of   car : 89 %
Accuracy of  bird : 71 %
Accuracy of   cat : 53 %
Accuracy of  deer : 68 %
Accuracy of   dog : 64 %
Accuracy of  frog : 75 %
Accuracy of horse : 82 %
Accuracy of  ship : 79 %
Accuracy of truck : 83 %
