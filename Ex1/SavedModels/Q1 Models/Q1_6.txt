Net(
  (conv1): Conv2d(3, 6, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv2): Conv2d(6, 10, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv3): Conv2d(10, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (fc1): Linear(in_features=256, out_features=120, bias=True)
  (fc2): Linear(in_features=120, out_features=84, bias=True)
  (fc3): Linear(in_features=84, out_features=10, bias=True)
  (loss_function): CrossEntropyLoss()
)
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Conv2d-1            [-1, 6, 32, 32]             168
         MaxPool2d-2            [-1, 6, 16, 16]               0
            Conv2d-3           [-1, 10, 16, 16]             550
         MaxPool2d-4             [-1, 10, 8, 8]               0
            Conv2d-5             [-1, 16, 8, 8]           1,456
         MaxPool2d-6             [-1, 16, 4, 4]               0
            Linear-7                  [-1, 120]          30,840
            Linear-8                   [-1, 84]          10,164
            Linear-9                   [-1, 10]             850
================================================================
Total params: 44,028
Trainable params: 44,028
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.01
Forward/backward pass size (MB): 0.09
Params size (MB): 0.17
Estimated Total Size (MB): 0.27
----------------------------------------------------------------

Extra info:
Model's state_dict:
conv1.weight 	 torch.Size([6, 3, 3, 3])
conv1.bias 	 torch.Size([6])
conv2.weight 	 torch.Size([10, 6, 3, 3])
conv2.bias 	 torch.Size([10])
conv3.weight 	 torch.Size([16, 10, 3, 3])
conv3.bias 	 torch.Size([16])
fc1.weight 	 torch.Size([120, 256])
fc1.bias 	 torch.Size([120])
fc2.weight 	 torch.Size([84, 120])
fc2.bias 	 torch.Size([84])
fc3.weight 	 torch.Size([10, 84])
fc3.bias 	 torch.Size([10])

Optimizer's state_dict:
state 	 {}
param_groups 	 [{'lr': 0.001, 'momentum': 0.9, 'dampening': 0, 'weight_decay': 0, 'nesterov': False, 'params': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]}]

epoch: 1, train_loss: 1.8440141272974013, train_accuracy: 0.3081, test_loss: 1.6568691566586495, test_accuracy: 0.3953
epoch: 2, train_loss: 1.371175494993925, train_accuracy: 0.50322, test_loss: 1.26124399279356, test_accuracy: 0.5455
epoch: 3, train_loss: 1.2068533452486991, train_accuracy: 0.56964, test_loss: 1.1784350923910738, test_accuracy: 0.5828
epoch: 4, train_loss: 1.1203615855950118, train_accuracy: 0.60274, test_loss: 1.166622489119321, test_accuracy: 0.5944
epoch: 5, train_loss: 1.0569766352698207, train_accuracy: 0.62714, test_loss: 1.113810587196052, test_accuracy: 0.6043
epoch: 6, train_loss: 1.009554655829668, train_accuracy: 0.64172, test_loss: 1.0891734720431268, test_accuracy: 0.6219
epoch: 7, train_loss: 0.9740866126654297, train_accuracy: 0.65482, test_loss: 1.113956067571044, test_accuracy: 0.6123
epoch: 8, train_loss: 0.9399600690252706, train_accuracy: 0.66826, test_loss: 1.1076964744772761, test_accuracy: 0.6163
epoch: 9, train_loss: 0.9116981206765771, train_accuracy: 0.67784, test_loss: 1.108830237507075, test_accuracy: 0.6241
epoch: 10, train_loss: 0.8891139259898663, train_accuracy: 0.68408, test_loss: 1.126689894594252, test_accuracy: 0.6184
epoch: 11, train_loss: 0.8651339591745659, train_accuracy: 0.69146, test_loss: 1.0627521325502545, test_accuracy: 0.6399
epoch: 12, train_loss: 0.8475694515158795, train_accuracy: 0.69902, test_loss: 1.1196455260518938, test_accuracy: 0.6337
epoch: 13, train_loss: 0.8376370018549543, train_accuracy: 0.70136, test_loss: 1.1447571669761092, test_accuracy: 0.6157
epoch: 14, train_loss: 0.8182151267832937, train_accuracy: 0.71366, test_loss: 1.1056283791673835, test_accuracy: 0.6363
epoch: 15, train_loss: 0.8102677781908959, train_accuracy: 0.71152, test_loss: 1.132724181892164, test_accuracy: 0.6255

Accuracy of plane : 64 %
Accuracy of   car : 73 %
Accuracy of  bird : 45 %
Accuracy of   cat : 53 %
Accuracy of  deer : 53 %
Accuracy of   dog : 47 %
Accuracy of  frog : 63 %
Accuracy of horse : 77 %
Accuracy of  ship : 77 %
Accuracy of truck : 68 %
