Net(
  (conv1): Conv2d(3, 6, kernel_size=(5, 5), stride=(1, 1))
  (conv2): Conv2d(6, 10, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (fc1): Linear(in_features=250, out_features=120, bias=True)
  (fc2): Linear(in_features=120, out_features=84, bias=True)
  (fc3): Linear(in_features=84, out_features=10, bias=True)
  (loss_function): CrossEntropyLoss()
)
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Conv2d-1            [-1, 6, 28, 28]             456
         MaxPool2d-2            [-1, 6, 14, 14]               0
            Conv2d-3           [-1, 10, 10, 10]           1,510
         MaxPool2d-4             [-1, 10, 5, 5]               0
            Linear-5                  [-1, 120]          30,120
            Linear-6                   [-1, 84]          10,164
            Linear-7                   [-1, 10]             850
================================================================
Total params: 43,100
Trainable params: 43,100
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.01
Forward/backward pass size (MB): 0.06
Params size (MB): 0.16
Estimated Total Size (MB): 0.23
----------------------------------------------------------------

Extra info:
Model's state_dict:
conv1.weight 	 torch.Size([6, 3, 5, 5])
conv1.bias 	 torch.Size([6])
conv2.weight 	 torch.Size([10, 6, 5, 5])
conv2.bias 	 torch.Size([10])
fc1.weight 	 torch.Size([120, 250])
fc1.bias 	 torch.Size([120])
fc2.weight 	 torch.Size([84, 120])
fc2.bias 	 torch.Size([84])
fc3.weight 	 torch.Size([10, 84])
fc3.bias 	 torch.Size([10])

Optimizer's state_dict:
state 	 {}
param_groups 	 [{'lr': 0.001, 'momentum': 0.9, 'dampening': 0, 'weight_decay': 0, 'nesterov': False, 'params': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]}]

epoch: 1, train_loss: 1.7118300369668007, train_accuracy: 0.36484, test_loss: 1.453295146894455, test_accuracy: 0.4751
epoch: 2, train_loss: 1.383196940381527, train_accuracy: 0.50156, test_loss: 1.3346336787641049, test_accuracy: 0.5204
epoch: 3, train_loss: 1.2821923602610827, train_accuracy: 0.54172, test_loss: 1.2995038484215737, test_accuracy: 0.5445
epoch: 4, train_loss: 1.2042008747027815, train_accuracy: 0.57176, test_loss: 1.2272785579688847, test_accuracy: 0.5675
epoch: 5, train_loss: 1.1462985220065713, train_accuracy: 0.59404, test_loss: 1.201464190120995, test_accuracy: 0.5811
epoch: 6, train_loss: 1.0967225126115978, train_accuracy: 0.6124, test_loss: 1.1779081880398095, test_accuracy: 0.5915
epoch: 7, train_loss: 1.0528610668358767, train_accuracy: 0.62778, test_loss: 1.1445271419864147, test_accuracy: 0.5991
epoch: 8, train_loss: 1.0226476616480202, train_accuracy: 0.63652, test_loss: 1.2929495332106948, test_accuracy: 0.5657
epoch: 9, train_loss: 0.9977377931004018, train_accuracy: 0.64484, test_loss: 1.1466717768549919, test_accuracy: 0.6077
epoch: 10, train_loss: 0.9682686798683926, train_accuracy: 0.6571, test_loss: 1.1587680650487542, test_accuracy: 0.6042
epoch: 11, train_loss: 0.9494609311433881, train_accuracy: 0.66502, test_loss: 1.1806363767272792, test_accuracy: 0.6039
epoch: 12, train_loss: 0.9264728187060542, train_accuracy: 0.6704, test_loss: 1.1893056635556742, test_accuracy: 0.6023
epoch: 13, train_loss: 0.9153517271248903, train_accuracy: 0.67554, test_loss: 1.1922347610555588, test_accuracy: 0.6068
epoch: 14, train_loss: 0.8972874517136253, train_accuracy: 0.68244, test_loss: 1.183177519613877, test_accuracy: 0.6095
epoch: 15, train_loss: 0.8851463279143348, train_accuracy: 0.6854, test_loss: 1.2135973687376826, test_accuracy: 0.6059

Accuracy of plane : 58 %
Accuracy of   car : 69 %
Accuracy of  bird : 44 %
Accuracy of   cat : 39 %
Accuracy of  deer : 52 %
Accuracy of   dog : 57 %
Accuracy of  frog : 73 %
Accuracy of horse : 65 %
Accuracy of  ship : 70 %
Accuracy of truck : 75 %
