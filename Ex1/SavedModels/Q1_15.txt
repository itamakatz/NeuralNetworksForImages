Net(
  (conv1): Conv2d(3, 6, kernel_size=(5, 5), stride=(1, 1))
  (conv2): Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (fc1): Linear(in_features=300, out_features=120, bias=True)
  (fc2): Linear(in_features=120, out_features=84, bias=True)
  (fc3): Linear(in_features=84, out_features=10, bias=True)
  (loss_function): CrossEntropyLoss()
)
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Conv2d-1            [-1, 6, 28, 28]             456
         MaxPool2d-2            [-1, 6, 14, 14]               0
            Conv2d-3           [-1, 12, 10, 10]           1,812
         MaxPool2d-4             [-1, 12, 5, 5]               0
            Linear-5                  [-1, 120]          36,120
            Linear-6                   [-1, 84]          10,164
            Linear-7                   [-1, 10]             850
================================================================
Total params: 49,402
Trainable params: 49,402
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.01
Forward/backward pass size (MB): 0.06
Params size (MB): 0.19
Estimated Total Size (MB): 0.26
----------------------------------------------------------------

Extra info:
Model's state_dict:
conv1.weight 	 torch.Size([6, 3, 5, 5])
conv1.bias 	 torch.Size([6])
conv2.weight 	 torch.Size([12, 6, 5, 5])
conv2.bias 	 torch.Size([12])
fc1.weight 	 torch.Size([120, 300])
fc1.bias 	 torch.Size([120])
fc2.weight 	 torch.Size([84, 120])
fc2.bias 	 torch.Size([84])
fc3.weight 	 torch.Size([10, 84])
fc3.bias 	 torch.Size([10])

Optimizer's state_dict:
state 	 {}
param_groups 	 [{'lr': 0.001, 'momentum': 0.9, 'dampening': 0, 'weight_decay': 0, 'nesterov': False, 'params': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]}]

epoch: 1, train_loss: 1.732270145624876, train_accuracy: 0.36176, test_loss: 1.4582808877229692, test_accuracy: 0.4654
epoch: 2, train_loss: 1.3773989266943931, train_accuracy: 0.50522, test_loss: 1.3604218952476979, test_accuracy: 0.52
epoch: 3, train_loss: 1.2416774139052629, train_accuracy: 0.5568, test_loss: 1.2799605071365834, test_accuracy: 0.5477
epoch: 4, train_loss: 1.155479655559361, train_accuracy: 0.59004, test_loss: 1.189091662441194, test_accuracy: 0.5843
epoch: 5, train_loss: 1.0882936869758368, train_accuracy: 0.61612, test_loss: 1.1652529294781386, test_accuracy: 0.5979
epoch: 6, train_loss: 1.0401092033146695, train_accuracy: 0.63306, test_loss: 1.1745804252624512, test_accuracy: 0.6029
epoch: 7, train_loss: 0.994825076905042, train_accuracy: 0.64934, test_loss: 1.174190614102781, test_accuracy: 0.6043
epoch: 8, train_loss: 0.9613295627132058, train_accuracy: 0.65958, test_loss: 1.1564904530206694, test_accuracy: 0.6076
epoch: 9, train_loss: 0.9309049472515843, train_accuracy: 0.67202, test_loss: 1.1717889970023185, test_accuracy: 0.6091
epoch: 10, train_loss: 0.9059211417817138, train_accuracy: 0.6779, test_loss: 1.1609500393982977, test_accuracy: 0.6063
epoch: 11, train_loss: 0.881371386332591, train_accuracy: 0.68692, test_loss: 1.1366001423519105, test_accuracy: 0.6186
epoch: 12, train_loss: 0.8640532638775325, train_accuracy: 0.69458, test_loss: 1.183143897735793, test_accuracy: 0.6269
epoch: 13, train_loss: 0.848765159456199, train_accuracy: 0.6995, test_loss: 1.1709479315683247, test_accuracy: 0.6085
epoch: 14, train_loss: 0.8319286032735929, train_accuracy: 0.70634, test_loss: 1.1862538837625645, test_accuracy: 0.6132
epoch: 15, train_loss: 0.8135462083372893, train_accuracy: 0.71384, test_loss: 1.2261693988818676, test_accuracy: 0.6115

Accuracy of plane : 67 %
Accuracy of   car : 68 %
Accuracy of  bird : 49 %
Accuracy of   cat : 46 %
Accuracy of  deer : 42 %
Accuracy of   dog : 45 %
Accuracy of  frog : 73 %
Accuracy of horse : 70 %
Accuracy of  ship : 69 %
Accuracy of truck : 79 %
