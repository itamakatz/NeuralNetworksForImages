Net(
  (conv1): Conv2d(3, 6, kernel_size=(5, 5), stride=(1, 1))
  (conv2): Conv2d(6, 14, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (fc1): Linear(in_features=350, out_features=120, bias=True)
  (fc2): Linear(in_features=120, out_features=84, bias=True)
  (fc3): Linear(in_features=84, out_features=10, bias=True)
  (loss_function): CrossEntropyLoss()
)
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Conv2d-1            [-1, 6, 28, 28]             456
         MaxPool2d-2            [-1, 6, 14, 14]               0
            Conv2d-3           [-1, 14, 10, 10]           2,114
         MaxPool2d-4             [-1, 14, 5, 5]               0
            Linear-5                  [-1, 120]          42,120
            Linear-6                   [-1, 84]          10,164
            Linear-7                   [-1, 10]             850
================================================================
Total params: 55,704
Trainable params: 55,704
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.01
Forward/backward pass size (MB): 0.06
Params size (MB): 0.21
Estimated Total Size (MB): 0.28
----------------------------------------------------------------

Extra info:
Model's state_dict:
conv1.weight 	 torch.Size([6, 3, 5, 5])
conv1.bias 	 torch.Size([6])
conv2.weight 	 torch.Size([14, 6, 5, 5])
conv2.bias 	 torch.Size([14])
fc1.weight 	 torch.Size([120, 350])
fc1.bias 	 torch.Size([120])
fc2.weight 	 torch.Size([84, 120])
fc2.bias 	 torch.Size([84])
fc3.weight 	 torch.Size([10, 84])
fc3.bias 	 torch.Size([10])

Optimizer's state_dict:
state 	 {}
param_groups 	 [{'lr': 0.001, 'momentum': 0.9, 'dampening': 0, 'weight_decay': 0, 'nesterov': False, 'params': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]}]

epoch: 1, train_loss: 1.7062811193716525, train_accuracy: 0.37194, test_loss: 1.4236490563213826, test_accuracy: 0.4915
epoch: 2, train_loss: 1.3546615761351586, train_accuracy: 0.51582, test_loss: 1.3111853626549244, test_accuracy: 0.5331
epoch: 3, train_loss: 1.218401023556143, train_accuracy: 0.5669, test_loss: 1.1875893115341662, test_accuracy: 0.5847
epoch: 4, train_loss: 1.13079578341797, train_accuracy: 0.59944, test_loss: 1.1968816077589988, test_accuracy: 0.5763
epoch: 5, train_loss: 1.0631351519137622, train_accuracy: 0.6254, test_loss: 1.1643246267437934, test_accuracy: 0.5832
epoch: 6, train_loss: 1.006739824303761, train_accuracy: 0.64568, test_loss: 1.1507661513909697, test_accuracy: 0.5983
epoch: 7, train_loss: 0.9622636771099549, train_accuracy: 0.66114, test_loss: 1.1369439578965306, test_accuracy: 0.6142
epoch: 8, train_loss: 0.9261738605768979, train_accuracy: 0.67646, test_loss: 1.1007301031764596, test_accuracy: 0.6251
epoch: 9, train_loss: 0.8947722262323741, train_accuracy: 0.6846, test_loss: 1.1465825210189446, test_accuracy: 0.618
epoch: 10, train_loss: 0.8605500449695159, train_accuracy: 0.69604, test_loss: 1.1791281395044177, test_accuracy: 0.6146
epoch: 11, train_loss: 0.8350252786091575, train_accuracy: 0.7065, test_loss: 1.2039985790934413, test_accuracy: 0.6103
epoch: 12, train_loss: 0.8179372766542296, train_accuracy: 0.71164, test_loss: 1.1880954820930028, test_accuracy: 0.6176
epoch: 13, train_loss: 0.7938703543996718, train_accuracy: 0.71976, test_loss: 1.2436642922805623, test_accuracy: 0.6118
epoch: 14, train_loss: 0.7739077712750947, train_accuracy: 0.72754, test_loss: 1.2035841562296963, test_accuracy: 0.614
epoch: 15, train_loss: 0.7630121784650759, train_accuracy: 0.73094, test_loss: 1.2401894584952853, test_accuracy: 0.6087

Accuracy of plane : 68 %
Accuracy of   car : 74 %
Accuracy of  bird : 35 %
Accuracy of   cat : 52 %
Accuracy of  deer : 55 %
Accuracy of   dog : 43 %
Accuracy of  frog : 66 %
Accuracy of horse : 64 %
Accuracy of  ship : 80 %
Accuracy of truck : 67 %
