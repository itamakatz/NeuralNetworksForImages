Net(
  (conv1): Conv2d(3, 4, kernel_size=(5, 5), stride=(1, 1))
  (conv2): Conv2d(4, 5, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (fc1): Linear(in_features=125, out_features=120, bias=True)
  (fc2): Linear(in_features=120, out_features=84, bias=True)
  (fc3): Linear(in_features=84, out_features=10, bias=True)
  (loss_function): CrossEntropyLoss()
)
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Conv2d-1            [-1, 4, 28, 28]             304
         MaxPool2d-2            [-1, 4, 14, 14]               0
            Conv2d-3            [-1, 5, 10, 10]             505
         MaxPool2d-4              [-1, 5, 5, 5]               0
            Linear-5                  [-1, 120]          15,120
            Linear-6                   [-1, 84]          10,164
            Linear-7                   [-1, 10]             850
================================================================
Total params: 26,943
Trainable params: 26,943
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.01
Forward/backward pass size (MB): 0.04
Params size (MB): 0.10
Estimated Total Size (MB): 0.15
----------------------------------------------------------------

Extra info:
Model's state_dict:
conv1.weight 	 torch.Size([4, 3, 5, 5])
conv1.bias 	 torch.Size([4])
conv2.weight 	 torch.Size([5, 4, 5, 5])
conv2.bias 	 torch.Size([5])
fc1.weight 	 torch.Size([120, 125])
fc1.bias 	 torch.Size([120])
fc2.weight 	 torch.Size([84, 120])
fc2.bias 	 torch.Size([84])
fc3.weight 	 torch.Size([10, 84])
fc3.bias 	 torch.Size([10])

Optimizer's state_dict:
state 	 {}
param_groups 	 [{'lr': 0.001, 'momentum': 0.9, 'dampening': 0, 'weight_decay': 0, 'nesterov': False, 'params': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]}]

epoch: 1, train_loss: 1.83119507907629, train_accuracy: 0.3241, test_loss: 1.5328853083908558, test_accuracy: 0.4444
epoch: 2, train_loss: 1.5022412014901638, train_accuracy: 0.44966, test_loss: 1.463182317841053, test_accuracy: 0.4714
epoch: 3, train_loss: 1.4261447525829076, train_accuracy: 0.48124, test_loss: 1.4008296876549722, test_accuracy: 0.494
epoch: 4, train_loss: 1.3755666852340103, train_accuracy: 0.50368, test_loss: 1.375660766750574, test_accuracy: 0.5071
epoch: 5, train_loss: 1.3398816824078559, train_accuracy: 0.51654, test_loss: 1.341795778042078, test_accuracy: 0.5198
epoch: 6, train_loss: 1.3061307180541755, train_accuracy: 0.52804, test_loss: 1.3525523765087129, test_accuracy: 0.5159
epoch: 7, train_loss: 1.2827826096582413, train_accuracy: 0.53694, test_loss: 1.343746602627635, test_accuracy: 0.5181
epoch: 8, train_loss: 1.2596329492264986, train_accuracy: 0.54822, test_loss: 1.3575847213745118, test_accuracy: 0.5189
epoch: 9, train_loss: 1.246014325504005, train_accuracy: 0.55594, test_loss: 1.3494946548193694, test_accuracy: 0.5241
epoch: 10, train_loss: 1.2277078220921755, train_accuracy: 0.56062, test_loss: 1.3516968416839839, test_accuracy: 0.5261
epoch: 11, train_loss: 1.212028672228232, train_accuracy: 0.56616, test_loss: 1.3490371387422084, test_accuracy: 0.5251
epoch: 12, train_loss: 1.19867660184592, train_accuracy: 0.57056, test_loss: 1.3436167891591788, test_accuracy: 0.5242
epoch: 13, train_loss: 1.1871621826286614, train_accuracy: 0.57544, test_loss: 1.3416928987383843, test_accuracy: 0.5361
epoch: 14, train_loss: 1.1769845834538342, train_accuracy: 0.58124, test_loss: 1.340264250342548, test_accuracy: 0.529
epoch: 15, train_loss: 1.1627382408049702, train_accuracy: 0.58414, test_loss: 1.3731708219200374, test_accuracy: 0.52

Accuracy of plane : 41 %
Accuracy of   car : 77 %
Accuracy of  bird : 37 %
Accuracy of   cat : 30 %
Accuracy of  deer : 38 %
Accuracy of   dog : 52 %
Accuracy of  frog : 65 %
Accuracy of horse : 53 %
Accuracy of  ship : 65 %
Accuracy of truck : 58 %
