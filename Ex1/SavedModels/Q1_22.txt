Net(
  (conv1): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1))
  (conv2): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (fc1): Linear(in_features=1600, out_features=32, bias=True)
  (fc2): Linear(in_features=32, out_features=10, bias=True)
  (loss_function): CrossEntropyLoss()
)
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Conv2d-1           [-1, 32, 28, 28]           2,432
         MaxPool2d-2           [-1, 32, 14, 14]               0
            Conv2d-3           [-1, 64, 10, 10]          51,264
         MaxPool2d-4             [-1, 64, 5, 5]               0
            Linear-5                   [-1, 32]          51,232
            Linear-6                   [-1, 10]             330
================================================================
Total params: 105,258
Trainable params: 105,258
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.01
Forward/backward pass size (MB): 0.30
Params size (MB): 0.40
Estimated Total Size (MB): 0.71
----------------------------------------------------------------

Extra info:
Model's state_dict:
conv1.weight 	 torch.Size([32, 3, 5, 5])
conv1.bias 	 torch.Size([32])
conv2.weight 	 torch.Size([64, 32, 5, 5])
conv2.bias 	 torch.Size([64])
fc1.weight 	 torch.Size([32, 1600])
fc1.bias 	 torch.Size([32])
fc2.weight 	 torch.Size([10, 32])
fc2.bias 	 torch.Size([10])

Optimizer's state_dict:
state 	 {}
param_groups 	 [{'lr': 0.001, 'momentum': 0.9, 'dampening': 0, 'weight_decay': 0, 'nesterov': False, 'params': [0, 1, 2, 3, 4, 5, 6, 7]}]

epoch: 1, train_loss: 1.5263140429925919, train_accuracy: 0.44518, test_loss: 1.332259125250578, test_accuracy: 0.5405
epoch: 2, train_loss: 1.0995630910468102, train_accuracy: 0.61392, test_loss: 1.057447171241045, test_accuracy: 0.6297
epoch: 3, train_loss: 0.9276963028502837, train_accuracy: 0.67762, test_loss: 0.9166921872477979, test_accuracy: 0.6843
epoch: 4, train_loss: 0.8254183708022534, train_accuracy: 0.71258, test_loss: 0.9457821485426277, test_accuracy: 0.6809
epoch: 5, train_loss: 0.7479627505435236, train_accuracy: 0.73814, test_loss: 0.8914596819639672, test_accuracy: 0.7035
epoch: 6, train_loss: 0.6817292821818823, train_accuracy: 0.7618, test_loss: 0.9087595624044538, test_accuracy: 0.7003
epoch: 7, train_loss: 0.6341545667402547, train_accuracy: 0.77902, test_loss: 0.9295908150475473, test_accuracy: 0.6992
epoch: 8, train_loss: 0.587572116348382, train_accuracy: 0.79548, test_loss: 0.9526046012646519, test_accuracy: 0.7041
epoch: 9, train_loss: 0.5479266027965571, train_accuracy: 0.8089, test_loss: 0.9694367359338562, test_accuracy: 0.7032
epoch: 10, train_loss: 0.5120238399112539, train_accuracy: 0.8203, test_loss: 1.0464288965584478, test_accuracy: 0.6872
epoch: 11, train_loss: 0.4848083446324468, train_accuracy: 0.82836, test_loss: 1.0790184568259982, test_accuracy: 0.6946
epoch: 12, train_loss: 0.46020775448134, train_accuracy: 0.83832, test_loss: 1.1070842458800683, test_accuracy: 0.6965
epoch: 13, train_loss: 0.43058533371703206, train_accuracy: 0.84722, test_loss: 1.1547350439640518, test_accuracy: 0.6888
epoch: 14, train_loss: 0.4082626091548934, train_accuracy: 0.8552, test_loss: 1.2135223765466274, test_accuracy: 0.6849
epoch: 15, train_loss: 0.3956347370829598, train_accuracy: 0.86118, test_loss: 1.282205111177113, test_accuracy: 0.6926

Accuracy of plane : 69 %
Accuracy of   car : 84 %
Accuracy of  bird : 57 %
Accuracy of   cat : 51 %
Accuracy of  deer : 72 %
Accuracy of   dog : 57 %
Accuracy of  frog : 71 %
Accuracy of horse : 72 %
Accuracy of  ship : 80 %
Accuracy of truck : 74 %
