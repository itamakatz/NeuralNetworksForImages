Net(
  (conv1): Conv2d(3, 6, kernel_size=(3, 3), stride=(1, 1))
  (conv2): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (fc1): Linear(in_features=576, out_features=120, bias=True)
  (fc2): Linear(in_features=120, out_features=84, bias=True)
  (fc3): Linear(in_features=84, out_features=10, bias=True)
  (loss_function): CrossEntropyLoss()
)
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Conv2d-1            [-1, 6, 30, 30]             168
         MaxPool2d-2            [-1, 6, 15, 15]               0
            Conv2d-3           [-1, 16, 13, 13]             880
         MaxPool2d-4             [-1, 16, 6, 6]               0
            Linear-5                  [-1, 120]          69,240
            Linear-6                   [-1, 84]          10,164
            Linear-7                   [-1, 10]             850
================================================================
Total params: 81,302
Trainable params: 81,302
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.01
Forward/backward pass size (MB): 0.08
Params size (MB): 0.31
Estimated Total Size (MB): 0.40
----------------------------------------------------------------

Extra info:
Model's state_dict:
conv1.weight 	 torch.Size([6, 3, 3, 3])
conv1.bias 	 torch.Size([6])
conv2.weight 	 torch.Size([16, 6, 3, 3])
conv2.bias 	 torch.Size([16])
fc1.weight 	 torch.Size([120, 576])
fc1.bias 	 torch.Size([120])
fc2.weight 	 torch.Size([84, 120])
fc2.bias 	 torch.Size([84])
fc3.weight 	 torch.Size([10, 84])
fc3.bias 	 torch.Size([10])

Optimizer's state_dict:
state 	 {}
param_groups 	 [{'lr': 0.001, 'momentum': 0.9, 'dampening': 0, 'weight_decay': 0, 'nesterov': False, 'params': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]}]

epoch: 1, train_loss: 1.7073974320816994, train_accuracy: 0.37446, test_loss: 1.4023377478837966, test_accuracy: 0.4936
epoch: 2, train_loss: 1.3225834920859336, train_accuracy: 0.5269, test_loss: 1.2044690173387527, test_accuracy: 0.5694
epoch: 3, train_loss: 1.1689503768208622, train_accuracy: 0.5878, test_loss: 1.1608431025892496, test_accuracy: 0.588
epoch: 4, train_loss: 1.062614005715996, train_accuracy: 0.6238, test_loss: 1.1036875150546432, test_accuracy: 0.6158
epoch: 5, train_loss: 0.9762224577134848, train_accuracy: 0.65644, test_loss: 1.053111125268042, test_accuracy: 0.6309
epoch: 6, train_loss: 0.9054177094920725, train_accuracy: 0.67892, test_loss: 1.0555105367965996, test_accuracy: 0.6359
epoch: 7, train_loss: 0.8444681871669926, train_accuracy: 0.70052, test_loss: 1.081110512734577, test_accuracy: 0.631
epoch: 8, train_loss: 0.7958883589178044, train_accuracy: 0.72128, test_loss: 1.072074688266497, test_accuracy: 0.6471
epoch: 9, train_loss: 0.7504208989943937, train_accuracy: 0.73526, test_loss: 1.1500132060014177, test_accuracy: 0.6245
epoch: 10, train_loss: 0.7034125557855424, train_accuracy: 0.75176, test_loss: 1.1747961832505185, test_accuracy: 0.6309
epoch: 11, train_loss: 0.6660098264347785, train_accuracy: 0.76322, test_loss: 1.152872401581891, test_accuracy: 0.6391
epoch: 12, train_loss: 0.6386851112685376, train_accuracy: 0.77416, test_loss: 1.1791200353023596, test_accuracy: 0.6325
epoch: 13, train_loss: 0.6043997742298735, train_accuracy: 0.78484, test_loss: 1.25052915250262, test_accuracy: 0.6356
epoch: 14, train_loss: 0.5832165438468911, train_accuracy: 0.79336, test_loss: 1.2360399598545861, test_accuracy: 0.6307
epoch: 15, train_loss: 0.5585086263130287, train_accuracy: 0.79966, test_loss: 1.3329737828270067, test_accuracy: 0.6178

Accuracy of plane : 73 %
Accuracy of   car : 66 %
Accuracy of  bird : 43 %
Accuracy of   cat : 45 %
Accuracy of  deer : 46 %
Accuracy of   dog : 58 %
Accuracy of  frog : 72 %
Accuracy of horse : 63 %
Accuracy of  ship : 72 %
Accuracy of truck : 76 %
