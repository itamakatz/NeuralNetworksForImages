Net(
  (conv1): Conv2d(3, 6, kernel_size=(5, 5), stride=(1, 1))
  (conv2): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (fc1): Linear(in_features=400, out_features=120, bias=True)
  (fc2): Linear(in_features=120, out_features=10, bias=True)
  (loss_function): CrossEntropyLoss()
)
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Conv2d-1            [-1, 6, 28, 28]             456
         MaxPool2d-2            [-1, 6, 14, 14]               0
            Conv2d-3           [-1, 16, 10, 10]           2,416
         MaxPool2d-4             [-1, 16, 5, 5]               0
            Linear-5                  [-1, 120]          48,120
            Linear-6                   [-1, 10]           1,210
================================================================
Total params: 52,202
Trainable params: 52,202
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.01
Forward/backward pass size (MB): 0.06
Params size (MB): 0.20
Estimated Total Size (MB): 0.27
----------------------------------------------------------------

Extra info:
Model's state_dict:
conv1.weight 	 torch.Size([6, 3, 5, 5])
conv1.bias 	 torch.Size([6])
conv2.weight 	 torch.Size([16, 6, 5, 5])
conv2.bias 	 torch.Size([16])
fc1.weight 	 torch.Size([120, 400])
fc1.bias 	 torch.Size([120])
fc2.weight 	 torch.Size([10, 120])
fc2.bias 	 torch.Size([10])

Optimizer's state_dict:
state 	 {}
param_groups 	 [{'lr': 0.001, 'momentum': 0.9, 'dampening': 0, 'weight_decay': 0, 'nesterov': False, 'params': [0, 1, 2, 3, 4, 5, 6, 7]}]

epoch: 1, train_loss: 1.6038763436710834, train_accuracy: 0.41664, test_loss: 1.3303458681106568, test_accuracy: 0.5165
epoch: 2, train_loss: 1.2730959968012572, train_accuracy: 0.54668, test_loss: 1.1889977453410625, test_accuracy: 0.5795
epoch: 3, train_loss: 1.147420596319735, train_accuracy: 0.5961, test_loss: 1.1522489984869957, test_accuracy: 0.5947
epoch: 4, train_loss: 1.068515246738717, train_accuracy: 0.62494, test_loss: 1.1187576581284404, test_accuracy: 0.6096
epoch: 5, train_loss: 1.0077819298222288, train_accuracy: 0.64574, test_loss: 1.1341184499414638, test_accuracy: 0.6066
epoch: 6, train_loss: 0.9590731603461318, train_accuracy: 0.6623, test_loss: 1.150440809064731, test_accuracy: 0.6114
epoch: 7, train_loss: 0.915472912757825, train_accuracy: 0.67746, test_loss: 1.0994969348184764, test_accuracy: 0.6253
epoch: 8, train_loss: 0.8888673848394119, train_accuracy: 0.68724, test_loss: 1.1437556243816391, test_accuracy: 0.6159
epoch: 9, train_loss: 0.8604818613098562, train_accuracy: 0.6968, test_loss: 1.1616610833545216, test_accuracy: 0.6158
epoch: 10, train_loss: 0.8287010973741998, train_accuracy: 0.70764, test_loss: 1.1523186216378585, test_accuracy: 0.6255
epoch: 11, train_loss: 0.8081361336841341, train_accuracy: 0.71404, test_loss: 1.1587103020324605, test_accuracy: 0.6263
epoch: 12, train_loss: 0.7890762374807452, train_accuracy: 0.72046, test_loss: 1.2731225441460148, test_accuracy: 0.6014
epoch: 13, train_loss: 0.7674998284036201, train_accuracy: 0.72872, test_loss: 1.2353881042287684, test_accuracy: 0.6141
epoch: 14, train_loss: 0.7520146173699782, train_accuracy: 0.73228, test_loss: 1.2886444416032172, test_accuracy: 0.6061
epoch: 15, train_loss: 0.7461018289122887, train_accuracy: 0.7358, test_loss: 1.3018103507981635, test_accuracy: 0.604

Accuracy of plane : 70 %
Accuracy of   car : 78 %
Accuracy of  bird : 52 %
Accuracy of   cat : 45 %
Accuracy of  deer : 48 %
Accuracy of   dog : 52 %
Accuracy of  frog : 66 %
Accuracy of horse : 68 %
Accuracy of  ship : 59 %
Accuracy of truck : 60 %
